def handleStuff(line: str, char1: str, char2: str) -> int:
    n = 0

    if char1 in line and not char2 in line:
        n = 1

    if char2 in line and not char1 in line:
        n = -1

    return n


def condensator(path: str, remove_docstring: bool = True, remove_comments: bool = True) -> None:
    """
        Condensate a .py file

        Keyword arguments:
        path -- path to the python file
        remove_docstring -- if you want to remove docstrings or not (default: True)
        remove_comments -- if you want to remove comments or not (default: True)
    """

    # If path doesn't end with .py, add it
    if not path.endswith(".py"):
        path += ".py"

    lines = None

    # Try to open path and read all the lines
    try:
        with open(path) as f:
            lines = f.readlines()
    except:
        raise BaseException(f'Cannot open "{path}"')

    # Variable to detect if we are in a docstring or not
    inDocString = False

    inBrackets = 0
    inParentheses = 0
    inBraces = 0

    # List with all the lines of the output
    newLines = ["# Generated by CONDENSATOR 34XX !\n"]

    for i, line in enumerate(lines):
        # Create a variable withouth " " at the start and at the end
        strip_line = line.strip()

        wasInBrackets = handleStuff(newLines[-1].strip(), "{", "}")
        inBrackets += handleStuff(strip_line, "{", "}")

        wasInParentheses = handleStuff(newLines[-1].strip(), "(", ")")
        inParentheses += handleStuff(strip_line, "(", ")")

        wasInBraces = handleStuff(newLines[-1].strip(), "[", "]")
        inBraces += handleStuff(strip_line, "[", "]")

        if inBrackets > 0 or wasInBrackets > 0:
            if wasInBrackets <= 0:
                newLines[-1] += line.rstrip().replace("\n", "")
            else:
                newLines[-1] += strip_line.replace("\n", "")
            continue

        if inParentheses > 0 or wasInParentheses > 0:
            if wasInParentheses <= 0:
                newLines[-1] += line.rstrip().replace("\n", "")
            else:
                newLines[-1] += strip_line.replace("\n", "")
            continue

        if inBraces > 0 or wasInBraces > 0:
            if wasInBraces <= 0:
                newLines[-1] += line.rstrip().replace("\n", "")
            else:
                newLines[-1] += strip_line.replace("\n", "")
            continue

        # Detect the start/end of a docstring and change the variable, skip if remove_doctring
        if strip_line.startswith('"""'):
            inDocString = not inDocString

            if remove_docstring:
                continue

        # If we are in a docstring we don't want to condensate it, skip if remove_doctring
        if inDocString:
            if not remove_docstring:
                newLines.append(line)

            continue

        # Skip empty lines
        if strip_line == "\n" or strip_line == "":
            continue

        # Skip comments if wanted
        if remove_comments and strip_line.startswith("#"):
            continue

        # Append the new line
        newLines.append(line)

    # Create the output path
    outPath = path[:-3] + "-out.py"

    # Try to write the new file
    try:
        with open(outPath, "w") as f:
            f.writelines(newLines)
    except:
        raise BaseException(f'Cannot write in "{outPath}"')


if __name__ == "__main__":
    condensator("./src/tests/filetest")
